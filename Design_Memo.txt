Why is a stack the right choice for undo/redo?
Why is a queue better suited for the help desk?
How do your implementations differ from Pythonâ€™s built-in lists?

1. A stack is the right choice for an undo/redo because it is Last-in, First-Out (LIFO).
This means that the most recent thing you did is the first thing that can be undone.
If you undo something, you can also redo it in the same reverse order. 
Using a stack makes it easy to keep track of actions: A new action is pushed into the stack, 
pop the latest action to undo it, and store it on a redo stack if needed.
2. For the helo desk system, a queue works better because it is First-in, First-Out (FIFO).
It is just like standing in a phsyical line at a fast food restaurant, 
customers are helped in the order that they arrive, so the first person in line gets helped first.
Any new customers added are added to the back of the line, and helping a customer removes them from the front.
My stack and queue are a bit different from Python's built in lists. Lists can act like stacks or queues, 
but doing things like removing the first item of a list can be slow. Using the Node-based implementation, 
adding or removing items is faster and works how a stack or queue is supposed to.
